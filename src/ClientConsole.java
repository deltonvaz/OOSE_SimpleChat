// This file contains material supporting section 3.7 of the textbook:// "Object Oriented Software Engineering" and is issued under the open-source// license found at www.lloseng.com import java.io.*;import client.*;import common.*;/** * This class constructs the UI for a chat client.  It implements the * chat interface in order to activate the display() method. * Warning: Some of the code here is cloned in ServerConsole  * * @author Fran&ccedil;ois B&eacute;langer (original) * @author Dr Timothy C. Lethbridge (original) * @author Dr Robert Lagani&egrave;re (original) * @author Delton Vaz (edition for OOSE) * @author William D'amico (edition for OOSE) * @version November 2018 */public class ClientConsole implements ChatIF {	//Class variables *************************************************	/**	 * The default port to connect on.	 */	final public static int DEFAULT_PORT = 5555;	//Instance variables **********************************************	/**	 * The instance of the client that created this ConsoleChat.	 */	ChatClient client;	//Constructors ****************************************************	/**	 * Constructs an instance of the ClientConsole UI.	 *	 * @param host The host to connect to.	 * @param port The port to connect on.	 * @throws IOException IO exception	 */	public ClientConsole(String host, int port) throws IOException 	{		client= new ChatClient(host, port, this);	}	/**	 * Constructs an instance of the ClientConsole UI with username.	 *	 * @param host The host to connect to.	 * @param port The port to connect on.	 * @param username The username of client.	 */	public ClientConsole(String host, int port, String username){		client = new ChatClient(host, port, this, username);	}	//Instance methods ************************************************	/**	 * This method waits for input from the console.  Once it is 	 * received, it sends it to the client's message handler.	 */	public void accept() 	{		try		{			BufferedReader fromConsole = 					new BufferedReader(new InputStreamReader(System.in));			String message;			while (true) 			{				message = fromConsole.readLine();				client.handleMessageFromClientUI(message);			}		} 		catch (Exception ex) 		{			System.out.println			("Unexpected error while reading from console!");		}	}	/**	 * This method overrides the method in the ChatIF interface.  It	 * displays a message onto the screen.	 *	 * @param message The string to be displayed.	 */	public void display(String message) 	{		System.out.println("Message> " + message);	}	//Class methods ***************************************************	/**	 * This method is responsible for the creation of the Client UI.	 *	 * @param args[0] The username to connect to.	 * @param args[1] The host to connect to.	 * @param args[2] The port to connect to.	 */	public static void main(String[] args) {		String username = "";		String host = "localhost";		int port = DEFAULT_PORT;		if(args.length >= 1) {			username = args[0];			if(username != null && username.length() > 0) {				if(args.length >= 2) {					host = args[1];					if(args.length >= 3) {						try {							port = Integer.parseInt(args[2]);						} catch (NumberFormatException e) {							port = DEFAULT_PORT;						}					}					else {						port = DEFAULT_PORT;					}				}				ClientConsole chat = new ClientConsole(host, port, username);				chat.accept();			}			else {				System.out.println("Invalid username!");			}		}		else {			System.out.println("You should user username (first argument)!");		}	}}//End of ClientConsole class