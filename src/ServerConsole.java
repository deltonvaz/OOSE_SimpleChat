import java.io.*;import common.ChatIF;import server.EchoServer;/** * This class constructs the UI for a server client.  It implements the * chat interface in order to activate the display() method. * * @author Delton Vaz (edition for OOSE) * @author William D'amico (edition for OOSE) * @version November 2018 */public class ServerConsole implements ChatIF {	//Class variables *************************************************	/**	 * The default port to connect on.	 */	final public static int DEFAULT_PORT = 5555;	//Instance variables **********************************************	/**	 * The instance of the client that created this ConsoleChat.	 */	EchoServer server;	//Constructors ****************************************************	/**	 * Constructs an instance of the ServerConsole UI.	 *	 * @param port The port to connect on.	 */	public ServerConsole(int port){		this.server = new EchoServer(this, port);	}	//Instance methods ************************************************	/**	 * This method waits for input from the console.  Once it is	 * received, it sends it to the client's message handler.	 */	public void accept() 	{		try		{			BufferedReader fromConsole = 					new BufferedReader(new InputStreamReader(System.in));			String message;			while (true) 			{				message = fromConsole.readLine();				server.handleMessageFromServerUI(message);			}		} 		catch (Exception ex) 		{			System.out.println("Unexpected error while reading from console!");		}	}	/**	 * This method overrides the method in the ChatIF interface.  It	 * displays a message onto the screen.	 *	 * @param message The string to be displayed.	 */	public void display(String message) {		System.out.println("Server> " + message);	}	//Class methods ***************************************************	/**	 * This method is responsible for the creation of the Client UI.	 *	 * @param args[0] The port which receives connection.	 */	public static void main(String[] args) {		int port = 0; //Port to listen on		try{			port = Integer.parseInt(args[0]); //Get port from command line		}		catch(Throwable t){			port = EchoServer.DEFAULT_PORT; //Set port to 5555		}		ServerConsole sc = new ServerConsole(port);		try {			sc.server.listen(); //Start listening for connections		} 		catch (Exception ex) {			System.out.println("ERROR - Could not listen for clients!");			System.out.println(ex);		}		sc.accept();	}}//End of ServerConsole class